# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Awaitable, Optional, Union, overload

from pydantic import Field, StrictBool, StrictStr, conlist, validate_arguments
from typing_extensions import Annotated

from slskd.api_client import ApiClient
from slskd.api_response import ApiResponse
from slskd.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from slskd.models.queue_download_request import QueueDownloadRequest
from slskd.models.transfer import Transfer


class TransfersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def transfers_downloads_all_completed_delete(
        self, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_downloads_all_completed_delete(
        self, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_all_completed_delete(
        self, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Removes all completed downloads, regardless of whether they failed or succeeded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_all_completed_delete(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_all_completed_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_all_completed_delete_with_http_info(
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_all_completed_delete_with_http_info(
        self, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Removes all completed downloads, regardless of whether they failed or succeeded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_all_completed_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_all_completed_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/downloads/all/completed",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_get(
        self, include_removed: Optional[StrictBool] = None, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_downloads_get(
        self,
        include_removed: Optional[StrictBool] = None,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_get(
        self,
        include_removed: Optional[StrictBool] = None,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Gets all downloads.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_get(include_removed, async_req=True)
        >>> result = thread.get()

        :param include_removed:
        :type include_removed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_get_with_http_info(
            include_removed, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_get_with_http_info(
        self, include_removed: Optional[StrictBool] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets all downloads.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_get_with_http_info(include_removed, async_req=True)
        >>> result = thread.get()

        :param include_removed:
        :type include_removed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["include_removed"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("include_removed") is not None:  # noqa: E501
            _query_params.append(("includeRemoved", _params["include_removed"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/downloads",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_username_get(
        self, username: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_downloads_username_get(
        self, username: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_username_get(
        self, username: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Gets all downloads for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_get(username, async_req=True)
        >>> result = thread.get()

        :param username:  (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_username_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_username_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_username_get_with_http_info(
        self, username: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets all downloads for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username:  (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_username_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/downloads/{username}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked download should be removed after cancellation."
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_downloads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked download should be removed after cancellation."
            ),
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked download should be removed after cancellation."
            ),
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Cancels the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_delete(username, id, remove, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param id: The id of the download. (required)
        :type id: str
        :param remove: A value indicating whether the tracked download should be removed after cancellation.
        :type remove: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_username_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_username_id_delete_with_http_info(
            username, id, remove, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_username_id_delete_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked download should be removed after cancellation."
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Cancels the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_delete_with_http_info(username, id, remove, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param id: The id of the download. (required)
        :type id: str
        :param remove: A value indicating whether the tracked download should be removed after cancellation.
        :type remove: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username", "id", "remove"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_username_id_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("remove") is not None:  # noqa: E501
            _query_params.append(("remove", _params["remove"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/downloads/{username}/{id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_username_id_get(
        self, username: StrictStr, id: StrictStr, **kwargs
    ) -> Transfer:  # noqa: E501
        ...

    @overload
    def transfers_downloads_username_id_get(
        self,
        username: StrictStr,
        id: StrictStr,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> Transfer:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_username_id_get(
        self,
        username: StrictStr,
        id: StrictStr,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[Transfer, Awaitable[Transfer]]:  # noqa: E501
        """transfers_downloads_username_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_get(username, id, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transfer
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_username_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_username_id_get_with_http_info(
            username, id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_username_id_get_with_http_info(
        self, username: StrictStr, id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """transfers_downloads_username_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_get_with_http_info(username, id, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transfer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username", "id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_username_id_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Transfer",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/transfers/downloads/{username}/{id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_username_id_position_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        **kwargs
    ) -> Transfer:  # noqa: E501
        ...

    @overload
    def transfers_downloads_username_id_position_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> Transfer:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_username_id_position_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[Transfer, Awaitable[Transfer]]:  # noqa: E501
        """Gets the downlaod for the specified username matching the specified filename, and requests  the current place in the remote queue of the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_position_get(username, id, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param id: The id of the download. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transfer
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_username_id_position_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_username_id_position_get_with_http_info(
            username, id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_username_id_position_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the download.")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets the downlaod for the specified username matching the specified filename, and requests  the current place in the remote queue of the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_id_position_get_with_http_info(username, id, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param id: The id of the download. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transfer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username", "id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_username_id_position_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Transfer",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/transfers/downloads/{username}/{id}/position",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_downloads_username_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        queue_download_request: Annotated[
            Optional[conlist(QueueDownloadRequest)],
            Field(description="The list of download requests."),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_downloads_username_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        queue_download_request: Annotated[
            Optional[conlist(QueueDownloadRequest)],
            Field(description="The list of download requests."),
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_downloads_username_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        queue_download_request: Annotated[
            Optional[conlist(QueueDownloadRequest)],
            Field(description="The list of download requests."),
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Enqueues the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_post(username, queue_download_request, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param queue_download_request: The list of download requests.
        :type queue_download_request: List[QueueDownloadRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_downloads_username_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_downloads_username_post_with_http_info(
            username, queue_download_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_downloads_username_post_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the download source.")
        ],
        queue_download_request: Annotated[
            Optional[conlist(QueueDownloadRequest)],
            Field(description="The list of download requests."),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Enqueues the specified download.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_downloads_username_post_with_http_info(username, queue_download_request, async_req=True)
        >>> result = thread.get()

        :param username: The username of the download source. (required)
        :type username: str
        :param queue_download_request: The list of download requests.
        :type queue_download_request: List[QueueDownloadRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username", "queue_download_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_downloads_username_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["queue_download_request"] is not None:
            _body_params = _params["queue_download_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/downloads/{username}",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_uploads_all_completed_delete(
        self, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_uploads_all_completed_delete(
        self, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_uploads_all_completed_delete(
        self, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Removes all completed uploads, regardless of whether they failed or succeeded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_all_completed_delete(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_uploads_all_completed_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_uploads_all_completed_delete_with_http_info(
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_uploads_all_completed_delete_with_http_info(
        self, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Removes all completed uploads, regardless of whether they failed or succeeded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_all_completed_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_uploads_all_completed_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/uploads/all/completed",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_uploads_get(
        self, include_removed: Optional[StrictBool] = None, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_uploads_get(
        self,
        include_removed: Optional[StrictBool] = None,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_uploads_get(
        self,
        include_removed: Optional[StrictBool] = None,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Gets all uploads.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_get(include_removed, async_req=True)
        >>> result = thread.get()

        :param include_removed:
        :type include_removed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_uploads_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_uploads_get_with_http_info(
            include_removed, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_uploads_get_with_http_info(
        self, include_removed: Optional[StrictBool] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets all uploads.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_get_with_http_info(include_removed, async_req=True)
        >>> result = thread.get()

        :param include_removed:
        :type include_removed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["include_removed"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_uploads_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("include_removed") is not None:  # noqa: E501
            _query_params.append(("includeRemoved", _params["include_removed"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/uploads",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_uploads_username_get(
        self, username: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_uploads_username_get(
        self, username: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_uploads_username_get(
        self, username: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Gets all uploads for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_get(username, async_req=True)
        >>> result = thread.get()

        :param username:  (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_uploads_username_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_uploads_username_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_uploads_username_get_with_http_info(
        self, username: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets all uploads for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username:  (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_uploads_username_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/uploads/{username}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_uploads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked upload should be removed after cancellation."
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_uploads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked upload should be removed after cancellation."
            ),
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_uploads_username_id_delete(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked upload should be removed after cancellation."
            ),
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Cancels the specified upload.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_id_delete(username, id, remove, async_req=True)
        >>> result = thread.get()

        :param username: The username of the upload destination. (required)
        :type username: str
        :param id: The id of the upload. (required)
        :type id: str
        :param remove: A value indicating whether the tracked upload should be removed after cancellation.
        :type remove: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_uploads_username_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_uploads_username_id_delete_with_http_info(
            username, id, remove, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_uploads_username_id_delete_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        remove: Annotated[
            Optional[StrictBool],
            Field(
                description="A value indicating whether the tracked upload should be removed after cancellation."
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Cancels the specified upload.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_id_delete_with_http_info(username, id, remove, async_req=True)
        >>> result = thread.get()

        :param username: The username of the upload destination. (required)
        :type username: str
        :param id: The id of the upload. (required)
        :type id: str
        :param remove: A value indicating whether the tracked upload should be removed after cancellation.
        :type remove: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username", "id", "remove"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_uploads_username_id_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("remove") is not None:  # noqa: E501
            _query_params.append(("remove", _params["remove"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/uploads/{username}/{id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def transfers_uploads_username_id_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def transfers_uploads_username_id_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def transfers_uploads_username_id_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Gets the upload for the specified username matching the specified filename.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_id_get(username, id, async_req=True)
        >>> result = thread.get()

        :param username: The username of the upload destination. (required)
        :type username: str
        :param id: The id of the upload. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the transfers_uploads_username_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.transfers_uploads_username_id_get_with_http_info(
            username, id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transfers_uploads_username_id_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the upload destination.")
        ],
        id: Annotated[StrictStr, Field(..., description="The id of the upload.")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets the upload for the specified username matching the specified filename.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfers_uploads_username_id_get_with_http_info(username, id, async_req=True)
        >>> result = thread.get()

        :param username: The username of the upload destination. (required)
        :type username: str
        :param id: The id of the upload. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["username", "id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfers_uploads_username_id_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/transfers/uploads/{username}/{id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
