# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Awaitable, List, Optional, Union, overload

from pydantic import Field, StrictStr, validate_arguments
from typing_extensions import Annotated

from slskd.api_client import ApiClient
from slskd.api_response import ApiResponse
from slskd.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from slskd.models.directory import Directory
from slskd.models.directory_contents_request import DirectoryContentsRequest
from slskd.models.info import Info
from slskd.models.ip_end_point import IPEndPoint
from slskd.models.status import Status


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def users_username_browse_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> List[Directory]:  # noqa: E501
        ...

    @overload
    def users_username_browse_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> List[Directory]:  # noqa: E501
        ...

    @validate_arguments
    def users_username_browse_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[List[Directory], Awaitable[List[Directory]]]:  # noqa: E501
        """Retrieves the files shared by the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_browse_get(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Directory]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_browse_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_browse_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_browse_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves the files shared by the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_browse_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Directory], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_browse_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[Directory]",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/browse",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def users_username_browse_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> float:  # noqa: E501
        ...

    @overload
    def users_username_browse_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> float:  # noqa: E501
        ...

    @validate_arguments
    def users_username_browse_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[float, Awaitable[float]]:  # noqa: E501
        """Retrieves the status of the current browse operation for the specified username, if any.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_browse_status_get(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: float
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_browse_status_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_browse_status_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_browse_status_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves the status of the current browse operation for the specified username, if any.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_browse_status_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(float, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_browse_status_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "float",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/browse/status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def users_username_directory_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        directory_contents_request: Annotated[
            DirectoryContentsRequest,
            Field(..., description="The directory contents request."),
        ],
        **kwargs
    ) -> Directory:  # noqa: E501
        ...

    @overload
    def users_username_directory_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        directory_contents_request: Annotated[
            DirectoryContentsRequest,
            Field(..., description="The directory contents request."),
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> Directory:  # noqa: E501
        ...

    @validate_arguments
    def users_username_directory_post(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        directory_contents_request: Annotated[
            DirectoryContentsRequest,
            Field(..., description="The directory contents request."),
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[Directory, Awaitable[Directory]]:  # noqa: E501
        """Retrieves the files from the specified directory from the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_directory_post(username, directory_contents_request, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param directory_contents_request: The directory contents request. (required)
        :type directory_contents_request: DirectoryContentsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Directory
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_directory_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_directory_post_with_http_info(
            username, directory_contents_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_directory_post_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        directory_contents_request: Annotated[
            DirectoryContentsRequest,
            Field(..., description="The directory contents request."),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves the files from the specified directory from the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_directory_post_with_http_info(username, directory_contents_request, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param directory_contents_request: The directory contents request. (required)
        :type directory_contents_request: DirectoryContentsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Directory, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username", "directory_contents_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_directory_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["directory_contents_request"] is not None:
            _body_params = _params["directory_contents_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Directory",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/directory",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def users_username_endpoint_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> IPEndPoint:  # noqa: E501
        ...

    @overload
    def users_username_endpoint_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> IPEndPoint:  # noqa: E501
        ...

    @validate_arguments
    def users_username_endpoint_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[IPEndPoint, Awaitable[IPEndPoint]]:  # noqa: E501
        """Retrieves the address of the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_endpoint_get(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IPEndPoint
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_endpoint_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_endpoint_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_endpoint_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves the address of the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_endpoint_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IPEndPoint, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_endpoint_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "IPEndPoint",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/endpoint",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def users_username_info_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> Info:  # noqa: E501
        ...

    @overload
    def users_username_info_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> Info:  # noqa: E501
        ...

    @validate_arguments
    def users_username_info_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[Info, Awaitable[Info]]:  # noqa: E501
        """Retrieves information about the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_info_get(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Info
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_info_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_info_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_info_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves information about the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_info_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Info, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_info_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Info",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/info",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def users_username_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> Status:  # noqa: E501
        ...

    @overload
    def users_username_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = True,
        **kwargs
    ) -> Status:  # noqa: E501
        ...

    @validate_arguments
    def users_username_status_get(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        async_req: Optional[bool] = None,
        **kwargs
    ) -> Union[Status, Awaitable[Status]]:  # noqa: E501
        """Retrieves status for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_status_get(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Status
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the users_username_status_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.users_username_status_get_with_http_info(
            username, **kwargs
        )  # noqa: E501

    @validate_arguments
    def users_username_status_get_with_http_info(
        self,
        username: Annotated[
            StrictStr, Field(..., description="The username of the user.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Retrieves status for the specified username.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_username_status_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: The username of the user. (required)
        :type username: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Status, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["username"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_status_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["ApiKeyAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Status",
            "404": "ProblemDetails",
        }

        return self.api_client.call_api(
            "/users/{username}/status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
