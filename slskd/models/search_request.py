# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class SearchRequest(BaseModel):
    """
    A search request.
    """

    id: Optional[StrictStr] = Field(
        None, description="Gets or sets the unique search identifier."
    )
    file_limit: Optional[StrictInt] = Field(
        None,
        alias="fileLimit",
        description="Gets or sets the maximum number of file results to accept before the search is considered complete. (Default = 10,000).",
    )
    filter_responses: Optional[StrictBool] = Field(
        None,
        alias="filterResponses",
        description="Gets or sets a value indicating whether responses are to be filtered. (Default = true).",
    )
    maximum_peer_queue_length: Optional[StrictInt] = Field(
        None,
        alias="maximumPeerQueueLength",
        description="Gets or sets the maximum queue depth a peer may have in order for a response to be processed. (Default = 1000000).",
    )
    minimum_peer_upload_speed: Optional[StrictInt] = Field(
        None,
        alias="minimumPeerUploadSpeed",
        description="Gets or sets the minimum upload speed a peer must have in order for a response to be processed. (Default = 0).",
    )
    minimum_response_file_count: Optional[StrictInt] = Field(
        None,
        alias="minimumResponseFileCount",
        description="Gets or sets the minimum number of files a response must contain in order to be processed. (Default = 1).",
    )
    response_limit: Optional[StrictInt] = Field(
        None,
        alias="responseLimit",
        description="Gets or sets the maximum number of search results to accept before the search is considered complete. (Default = 100).",
    )
    search_text: Optional[StrictStr] = Field(
        None, alias="searchText", description="Gets or sets the search text."
    )
    search_timeout: Optional[StrictInt] = Field(
        None,
        alias="searchTimeout",
        description="Gets or sets the search timeout value, in seconds, used to determine when the search is complete. (Default = 15).",
    )
    token: Optional[StrictInt] = Field(
        None, description="Gets or sets the search token."
    )
    __properties = [
        "id",
        "fileLimit",
        "filterResponses",
        "maximumPeerQueueLength",
        "minimumPeerUploadSpeed",
        "minimumResponseFileCount",
        "responseLimit",
        "searchText",
        "searchTimeout",
        "token",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchRequest:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if file_limit (nullable) is None
        # and __fields_set__ contains the field
        if self.file_limit is None and "file_limit" in self.__fields_set__:
            _dict["fileLimit"] = None

        # set to None if filter_responses (nullable) is None
        # and __fields_set__ contains the field
        if self.filter_responses is None and "filter_responses" in self.__fields_set__:
            _dict["filterResponses"] = None

        # set to None if maximum_peer_queue_length (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.maximum_peer_queue_length is None
            and "maximum_peer_queue_length" in self.__fields_set__
        ):
            _dict["maximumPeerQueueLength"] = None

        # set to None if minimum_peer_upload_speed (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.minimum_peer_upload_speed is None
            and "minimum_peer_upload_speed" in self.__fields_set__
        ):
            _dict["minimumPeerUploadSpeed"] = None

        # set to None if minimum_response_file_count (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.minimum_response_file_count is None
            and "minimum_response_file_count" in self.__fields_set__
        ):
            _dict["minimumResponseFileCount"] = None

        # set to None if response_limit (nullable) is None
        # and __fields_set__ contains the field
        if self.response_limit is None and "response_limit" in self.__fields_set__:
            _dict["responseLimit"] = None

        # set to None if search_text (nullable) is None
        # and __fields_set__ contains the field
        if self.search_text is None and "search_text" in self.__fields_set__:
            _dict["searchText"] = None

        # set to None if search_timeout (nullable) is None
        # and __fields_set__ contains the field
        if self.search_timeout is None and "search_timeout" in self.__fields_set__:
            _dict["searchTimeout"] = None

        # set to None if token (nullable) is None
        # and __fields_set__ contains the field
        if self.token is None and "token" in self.__fields_set__:
            _dict["token"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchRequest:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchRequest.parse_obj(obj)

        _obj = SearchRequest.parse_obj(
            {
                "id": obj.get("id"),
                "file_limit": obj.get("fileLimit"),
                "filter_responses": obj.get("filterResponses"),
                "maximum_peer_queue_length": obj.get("maximumPeerQueueLength"),
                "minimum_peer_upload_speed": obj.get("minimumPeerUploadSpeed"),
                "minimum_response_file_count": obj.get("minimumResponseFileCount"),
                "response_limit": obj.get("responseLimit"),
                "search_text": obj.get("searchText"),
                "search_timeout": obj.get("searchTimeout"),
                "token": obj.get("token"),
            }
        )
        return _obj
