# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr

from slskd.models.user_presence import UserPresence


class UserData(BaseModel):
    """
    UserData
    """

    average_speed: Optional[StrictInt] = Field(None, alias="averageSpeed")
    country_code: Optional[StrictStr] = Field(None, alias="countryCode")
    directory_count: Optional[StrictInt] = Field(None, alias="directoryCount")
    file_count: Optional[StrictInt] = Field(None, alias="fileCount")
    slots_free: Optional[StrictInt] = Field(None, alias="slotsFree")
    status: Optional[UserPresence] = None
    upload_count: Optional[StrictInt] = Field(None, alias="uploadCount")
    username: Optional[StrictStr] = None
    __properties = [
        "averageSpeed",
        "countryCode",
        "directoryCount",
        "fileCount",
        "slotsFree",
        "status",
        "uploadCount",
        "username",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserData:
        """Create an instance of UserData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if country_code (nullable) is None
        # and __fields_set__ contains the field
        if self.country_code is None and "country_code" in self.__fields_set__:
            _dict["countryCode"] = None

        # set to None if slots_free (nullable) is None
        # and __fields_set__ contains the field
        if self.slots_free is None and "slots_free" in self.__fields_set__:
            _dict["slotsFree"] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserData:
        """Create an instance of UserData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserData.parse_obj(obj)

        _obj = UserData.parse_obj(
            {
                "average_speed": obj.get("averageSpeed"),
                "country_code": obj.get("countryCode"),
                "directory_count": obj.get("directoryCount"),
                "file_count": obj.get("fileCount"),
                "slots_free": obj.get("slotsFree"),
                "status": obj.get("status"),
                "upload_count": obj.get("uploadCount"),
                "username": obj.get("username"),
            }
        )
        return _obj
