# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

from slskd.models.directories_options import DirectoriesOptions
from slskd.models.feature_options import FeatureOptions
from slskd.models.filters_options import FiltersOptions
from slskd.models.flags_options import FlagsOptions
from slskd.models.global_options import GlobalOptions
from slskd.models.groups_options import GroupsOptions
from slskd.models.integration_options import IntegrationOptions
from slskd.models.logger_options import LoggerOptions
from slskd.models.metrics_options import MetricsOptions
from slskd.models.relay_options import RelayOptions
from slskd.models.shares_options import SharesOptions
from slskd.models.soulseek_options import SoulseekOptions
from slskd.models.web_options import WebOptions


class Options(BaseModel):
    """
    Application options.
    """

    debug: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether the application should run in debug mode.",
    )
    remote_configuration: Optional[StrictBool] = Field(
        None,
        alias="remoteConfiguration",
        description="Gets a value indicating whether remote configuration of options is allowed.",
    )
    instance_name: Optional[StrictStr] = Field(
        None,
        alias="instanceName",
        description="Gets the unique name for this instance.",
    )
    flags: Optional[FlagsOptions] = None
    relay: Optional[RelayOptions] = None
    directories: Optional[DirectoriesOptions] = None
    shares: Optional[SharesOptions] = None
    var_global: Optional[GlobalOptions] = Field(None, alias="global")
    groups: Optional[GroupsOptions] = None
    filters: Optional[FiltersOptions] = None
    rooms: Optional[conlist(StrictStr)] = Field(
        None, description="Gets a list of rooms to automatically join upon connection."
    )
    web: Optional[WebOptions] = None
    logger: Optional[LoggerOptions] = None
    metrics: Optional[MetricsOptions] = None
    feature: Optional[FeatureOptions] = None
    soulseek: Optional[SoulseekOptions] = None
    integration: Optional[IntegrationOptions] = None
    __properties = [
        "debug",
        "remoteConfiguration",
        "instanceName",
        "flags",
        "relay",
        "directories",
        "shares",
        "global",
        "groups",
        "filters",
        "rooms",
        "web",
        "logger",
        "metrics",
        "feature",
        "soulseek",
        "integration",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Options:
        """Create an instance of Options from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of flags
        if self.flags:
            _dict["flags"] = self.flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relay
        if self.relay:
            _dict["relay"] = self.relay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of directories
        if self.directories:
            _dict["directories"] = self.directories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shares
        if self.shares:
            _dict["shares"] = self.shares.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_global
        if self.var_global:
            _dict["global"] = self.var_global.to_dict()
        # override the default output from pydantic by calling `to_dict()` of groups
        if self.groups:
            _dict["groups"] = self.groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict["filters"] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web
        if self.web:
            _dict["web"] = self.web.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logger
        if self.logger:
            _dict["logger"] = self.logger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict["metrics"] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature
        if self.feature:
            _dict["feature"] = self.feature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of soulseek
        if self.soulseek:
            _dict["soulseek"] = self.soulseek.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration
        if self.integration:
            _dict["integration"] = self.integration.to_dict()
        # set to None if instance_name (nullable) is None
        # and __fields_set__ contains the field
        if self.instance_name is None and "instance_name" in self.__fields_set__:
            _dict["instanceName"] = None

        # set to None if rooms (nullable) is None
        # and __fields_set__ contains the field
        if self.rooms is None and "rooms" in self.__fields_set__:
            _dict["rooms"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Options:
        """Create an instance of Options from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Options.parse_obj(obj)

        _obj = Options.parse_obj(
            {
                "debug": obj.get("debug"),
                "remote_configuration": obj.get("remoteConfiguration"),
                "instance_name": obj.get("instanceName"),
                "flags": FlagsOptions.from_dict(obj.get("flags"))
                if obj.get("flags") is not None
                else None,
                "relay": RelayOptions.from_dict(obj.get("relay"))
                if obj.get("relay") is not None
                else None,
                "directories": DirectoriesOptions.from_dict(obj.get("directories"))
                if obj.get("directories") is not None
                else None,
                "shares": SharesOptions.from_dict(obj.get("shares"))
                if obj.get("shares") is not None
                else None,
                "var_global": GlobalOptions.from_dict(obj.get("global"))
                if obj.get("global") is not None
                else None,
                "groups": GroupsOptions.from_dict(obj.get("groups"))
                if obj.get("groups") is not None
                else None,
                "filters": FiltersOptions.from_dict(obj.get("filters"))
                if obj.get("filters") is not None
                else None,
                "rooms": obj.get("rooms"),
                "web": WebOptions.from_dict(obj.get("web"))
                if obj.get("web") is not None
                else None,
                "logger": LoggerOptions.from_dict(obj.get("logger"))
                if obj.get("logger") is not None
                else None,
                "metrics": MetricsOptions.from_dict(obj.get("metrics"))
                if obj.get("metrics") is not None
                else None,
                "feature": FeatureOptions.from_dict(obj.get("feature"))
                if obj.get("feature") is not None
                else None,
                "soulseek": SoulseekOptions.from_dict(obj.get("soulseek"))
                if obj.get("soulseek") is not None
                else None,
                "integration": IntegrationOptions.from_dict(obj.get("integration"))
                if obj.get("integration") is not None
                else None,
            }
        )
        return _obj
