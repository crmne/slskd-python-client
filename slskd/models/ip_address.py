# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt

from slskd.models.address_family import AddressFamily


class IPAddress(BaseModel):
    """
    IPAddress
    """

    address_family: Optional[AddressFamily] = Field(None, alias="addressFamily")
    scope_id: Optional[StrictInt] = Field(None, alias="scopeId")
    is_ipv6_multicast: Optional[StrictBool] = Field(None, alias="isIPv6Multicast")
    is_ipv6_link_local: Optional[StrictBool] = Field(None, alias="isIPv6LinkLocal")
    is_ipv6_site_local: Optional[StrictBool] = Field(None, alias="isIPv6SiteLocal")
    is_ipv6_teredo: Optional[StrictBool] = Field(None, alias="isIPv6Teredo")
    is_ipv6_unique_local: Optional[StrictBool] = Field(None, alias="isIPv6UniqueLocal")
    is_ipv4_mapped_to_ipv6: Optional[StrictBool] = Field(
        None, alias="isIPv4MappedToIPv6"
    )
    address: Optional[StrictInt] = None
    __properties = [
        "addressFamily",
        "scopeId",
        "isIPv6Multicast",
        "isIPv6LinkLocal",
        "isIPv6SiteLocal",
        "isIPv6Teredo",
        "isIPv6UniqueLocal",
        "isIPv4MappedToIPv6",
        "address",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IPAddress:
        """Create an instance of IPAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "is_ipv6_multicast",
                "is_ipv6_link_local",
                "is_ipv6_site_local",
                "is_ipv6_teredo",
                "is_ipv6_unique_local",
                "is_ipv4_mapped_to_ipv6",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IPAddress:
        """Create an instance of IPAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IPAddress.parse_obj(obj)

        _obj = IPAddress.parse_obj(
            {
                "address_family": obj.get("addressFamily"),
                "scope_id": obj.get("scopeId"),
                "is_ipv6_multicast": obj.get("isIPv6Multicast"),
                "is_ipv6_link_local": obj.get("isIPv6LinkLocal"),
                "is_ipv6_site_local": obj.get("isIPv6SiteLocal"),
                "is_ipv6_teredo": obj.get("isIPv6Teredo"),
                "is_ipv6_unique_local": obj.get("isIPv6UniqueLocal"),
                "is_ipv4_mapped_to_ipv6": obj.get("isIPv4MappedToIPv6"),
                "address": obj.get("address"),
            }
        )
        return _obj
