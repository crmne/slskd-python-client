# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Dict, Optional

from pydantic import BaseModel, Field

from slskd.models.blacklisted_options import BlacklistedOptions
from slskd.models.built_in_options import BuiltInOptions
from slskd.models.leecher_options import LeecherOptions
from slskd.models.user_defined_options import UserDefinedOptions


class GroupsOptions(BaseModel):
    """
    User groups.
    """

    default: Optional[BuiltInOptions] = None
    leechers: Optional[LeecherOptions] = None
    blacklisted: Optional[BlacklistedOptions] = None
    user_defined: Optional[Dict[str, UserDefinedOptions]] = Field(
        None, alias="userDefined", description="Gets user defined groups and options."
    )
    __properties = ["default", "leechers", "blacklisted", "userDefined"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupsOptions:
        """Create an instance of GroupsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict["default"] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leechers
        if self.leechers:
            _dict["leechers"] = self.leechers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blacklisted
        if self.blacklisted:
            _dict["blacklisted"] = self.blacklisted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in user_defined (dict)
        _field_dict = {}
        if self.user_defined:
            for _key in self.user_defined:
                if self.user_defined[_key]:
                    _field_dict[_key] = self.user_defined[_key].to_dict()
            _dict["userDefined"] = _field_dict
        # set to None if user_defined (nullable) is None
        # and __fields_set__ contains the field
        if self.user_defined is None and "user_defined" in self.__fields_set__:
            _dict["userDefined"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupsOptions:
        """Create an instance of GroupsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GroupsOptions.parse_obj(obj)

        _obj = GroupsOptions.parse_obj(
            {
                "default": BuiltInOptions.from_dict(obj.get("default"))
                if obj.get("default") is not None
                else None,
                "leechers": LeecherOptions.from_dict(obj.get("leechers"))
                if obj.get("leechers") is not None
                else None,
                "blacklisted": BlacklistedOptions.from_dict(obj.get("blacklisted"))
                if obj.get("blacklisted") is not None
                else None,
                "user_defined": dict(
                    (_k, UserDefinedOptions.from_dict(_v))
                    for _k, _v in obj.get("userDefined").items()
                )
                if obj.get("userDefined") is not None
                else None,
            }
        )
        return _obj
