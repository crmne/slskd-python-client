# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, conint

from slskd.models.certificate_options import CertificateOptions


class HttpsOptions(BaseModel):
    """
    HTTPS options.
    """

    disabled: Optional[StrictBool] = Field(
        None, description="Gets a value indicating whether HTTPS should be disabled."
    )
    port: Optional[conint(strict=True, le=65535, ge=1)] = Field(
        None, description="Gets the HTTPS listen port."
    )
    force: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether HTTP requests should be redirected to HTTPS.",
    )
    certificate: Optional[CertificateOptions] = None
    __properties = ["disabled", "port", "force", "certificate"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HttpsOptions:
        """Create an instance of HttpsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict["certificate"] = self.certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HttpsOptions:
        """Create an instance of HttpsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HttpsOptions.parse_obj(obj)

        _obj = HttpsOptions.parse_obj(
            {
                "disabled": obj.get("disabled"),
                "port": obj.get("port"),
                "force": obj.get("force"),
                "certificate": CertificateOptions.from_dict(obj.get("certificate"))
                if obj.get("certificate") is not None
                else None,
            }
        )
        return _obj
