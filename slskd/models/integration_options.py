# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel

from slskd.models.ftp_options import FtpOptions
from slskd.models.pushbullet_options import PushbulletOptions


class IntegrationOptions(BaseModel):
    """
    Options for external integrations.
    """

    ftp: Optional[FtpOptions] = None
    pushbullet: Optional[PushbulletOptions] = None
    __properties = ["ftp", "pushbullet"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrationOptions:
        """Create an instance of IntegrationOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ftp
        if self.ftp:
            _dict["ftp"] = self.ftp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pushbullet
        if self.pushbullet:
            _dict["pushbullet"] = self.pushbullet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrationOptions:
        """Create an instance of IntegrationOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrationOptions.parse_obj(obj)

        _obj = IntegrationOptions.parse_obj(
            {
                "ftp": FtpOptions.from_dict(obj.get("ftp"))
                if obj.get("ftp") is not None
                else None,
                "pushbullet": PushbulletOptions.from_dict(obj.get("pushbullet"))
                if obj.get("pushbullet") is not None
                else None,
            }
        )
        return _obj
