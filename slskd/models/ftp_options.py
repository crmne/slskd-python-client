# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, conint


class FtpOptions(BaseModel):
    """
    FTP options.
    """

    enabled: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether the FTP integration is enabled.",
    )
    address: Optional[StrictStr] = Field(None, description="Gets the FTP address.")
    port: Optional[conint(strict=True, le=65535, ge=1)] = Field(
        None, description="Gets the FTP port."
    )
    encryption_mode: Optional[StrictStr] = Field(
        None, alias="encryptionMode", description="Gets the FTP encryption mode."
    )
    ignore_certificate_errors: Optional[StrictBool] = Field(
        None,
        alias="ignoreCertificateErrors",
        description="Gets a value indicating whether FTP certificate errors should be ignored.",
    )
    username: Optional[StrictStr] = Field(None, description="Gets the FTP username.")
    password: Optional[StrictStr] = Field(None, description="Gets the FTP password.")
    remote_path: Optional[StrictStr] = Field(
        None, alias="remotePath", description="Gets the remote path for uploads."
    )
    overwrite_existing: Optional[StrictBool] = Field(
        None,
        alias="overwriteExisting",
        description="Gets a value indicating whether existing files should be overwritten.",
    )
    connection_timeout: Optional[conint(strict=True, le=2147483647, ge=0)] = Field(
        None,
        alias="connectionTimeout",
        description="Gets the connection timeout value, in milliseconds.",
    )
    retry_attempts: Optional[conint(strict=True, le=5, ge=0)] = Field(
        None,
        alias="retryAttempts",
        description="Gets the number of times failing uploads will be retried.",
    )
    __properties = [
        "enabled",
        "address",
        "port",
        "encryptionMode",
        "ignoreCertificateErrors",
        "username",
        "password",
        "remotePath",
        "overwriteExisting",
        "connectionTimeout",
        "retryAttempts",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FtpOptions:
        """Create an instance of FtpOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if address (nullable) is None
        # and __fields_set__ contains the field
        if self.address is None and "address" in self.__fields_set__:
            _dict["address"] = None

        # set to None if encryption_mode (nullable) is None
        # and __fields_set__ contains the field
        if self.encryption_mode is None and "encryption_mode" in self.__fields_set__:
            _dict["encryptionMode"] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict["password"] = None

        # set to None if remote_path (nullable) is None
        # and __fields_set__ contains the field
        if self.remote_path is None and "remote_path" in self.__fields_set__:
            _dict["remotePath"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FtpOptions:
        """Create an instance of FtpOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FtpOptions.parse_obj(obj)

        _obj = FtpOptions.parse_obj(
            {
                "enabled": obj.get("enabled"),
                "address": obj.get("address"),
                "port": obj.get("port"),
                "encryption_mode": obj.get("encryptionMode"),
                "ignore_certificate_errors": obj.get("ignoreCertificateErrors"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "remote_path": obj.get("remotePath"),
                "overwrite_existing": obj.get("overwriteExisting"),
                "connection_timeout": obj.get("connectionTimeout"),
                "retry_attempts": obj.get("retryAttempts"),
            }
        )
        return _obj
