# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool


class FlagsOptions(BaseModel):
    """
    Optional flags.
    """

    no_logo: Optional[StrictBool] = Field(
        None,
        alias="noLogo",
        description="Gets a value indicating whether the logo should be suppressed on startup.",
    )
    no_start: Optional[StrictBool] = Field(
        None,
        alias="noStart",
        description="Gets a value indicating whether the application should quit after initialization.",
    )
    no_connect: Optional[StrictBool] = Field(
        None,
        alias="noConnect",
        description="Gets a value indicating whether the application should connect to the Soulseek network on startup.",
    )
    no_share_scan: Optional[StrictBool] = Field(
        None,
        alias="noShareScan",
        description="Gets a value indicating whether the application should scan shared directories on startup.",
    )
    force_share_scan: Optional[StrictBool] = Field(
        None,
        alias="forceShareScan",
        description="Gets a value indicating whether shares should be forcibly re-scanned on startup.",
    )
    no_version_check: Optional[StrictBool] = Field(
        None,
        alias="noVersionCheck",
        description="Gets a value indicating whether the application should check for a newer version on startup.",
    )
    log_sql: Optional[StrictBool] = Field(
        None,
        alias="logSQL",
        description="Gets a value indicating whether Entity Framework queries should be logged.",
    )
    experimental: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether the application should run in experimental mode.",
    )
    volatile: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether the application should run in volatile mode.",
    )
    case_sensitive_reg_ex: Optional[StrictBool] = Field(
        None,
        alias="caseSensitiveRegEx",
        description="Gets a value indicating whether user-defined regular expressions are case sensitive.",
    )
    __properties = [
        "noLogo",
        "noStart",
        "noConnect",
        "noShareScan",
        "forceShareScan",
        "noVersionCheck",
        "logSQL",
        "experimental",
        "volatile",
        "caseSensitiveRegEx",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlagsOptions:
        """Create an instance of FlagsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlagsOptions:
        """Create an instance of FlagsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlagsOptions.parse_obj(obj)

        _obj = FlagsOptions.parse_obj(
            {
                "no_logo": obj.get("noLogo"),
                "no_start": obj.get("noStart"),
                "no_connect": obj.get("noConnect"),
                "no_share_scan": obj.get("noShareScan"),
                "force_share_scan": obj.get("forceShareScan"),
                "no_version_check": obj.get("noVersionCheck"),
                "log_sql": obj.get("logSQL"),
                "experimental": obj.get("experimental"),
                "volatile": obj.get("volatile"),
                "case_sensitive_reg_ex": obj.get("caseSensitiveRegEx"),
            }
        )
        return _obj
