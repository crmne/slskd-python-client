# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, constr


class RelayControllerConfigurationOptions(BaseModel):
    """
    Relay controller configuration options.
    """

    address: Optional[StrictStr] = Field(
        None, description="Gets the controller address."
    )
    ignore_certificate_errors: Optional[StrictBool] = Field(
        None,
        alias="ignoreCertificateErrors",
        description="Gets a value indicating whether controller certificate errors should be ignored.",
    )
    api_key: Optional[constr(strict=True, max_length=255, min_length=16)] = Field(
        None, alias="apiKey", description="Gets the controller API key."
    )
    secret: Optional[constr(strict=True, max_length=255, min_length=16)] = Field(
        None, description="Gets the controller secret."
    )
    downloads: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether to receive completed downloads from the controller.",
    )
    __properties = [
        "address",
        "ignoreCertificateErrors",
        "apiKey",
        "secret",
        "downloads",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RelayControllerConfigurationOptions:
        """Create an instance of RelayControllerConfigurationOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if address (nullable) is None
        # and __fields_set__ contains the field
        if self.address is None and "address" in self.__fields_set__:
            _dict["address"] = None

        # set to None if api_key (nullable) is None
        # and __fields_set__ contains the field
        if self.api_key is None and "api_key" in self.__fields_set__:
            _dict["apiKey"] = None

        # set to None if secret (nullable) is None
        # and __fields_set__ contains the field
        if self.secret is None and "secret" in self.__fields_set__:
            _dict["secret"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RelayControllerConfigurationOptions:
        """Create an instance of RelayControllerConfigurationOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RelayControllerConfigurationOptions.parse_obj(obj)

        _obj = RelayControllerConfigurationOptions.parse_obj(
            {
                "address": obj.get("address"),
                "ignore_certificate_errors": obj.get("ignoreCertificateErrors"),
                "api_key": obj.get("apiKey"),
                "secret": obj.get("secret"),
                "downloads": obj.get("downloads"),
            }
        )
        return _obj
