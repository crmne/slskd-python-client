# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr

from slskd.models.https_options import HttpsOptions
from slskd.models.web_authentication_options import WebAuthenticationOptions


class WebOptions(BaseModel):
    """
    Web server options.
    """

    port: Optional[conint(strict=True, le=65535, ge=1)] = Field(
        None, description="Gets the HTTP listen port."
    )
    https: Optional[HttpsOptions] = None
    url_base: Optional[StrictStr] = Field(
        None, alias="urlBase", description="Gets the base url for web requests."
    )
    content_path: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(
        None, alias="contentPath", description="Gets the path to static web content."
    )
    logging: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether HTTP request logging should be enabled.",
    )
    authentication: Optional[WebAuthenticationOptions] = None
    __properties = [
        "port",
        "https",
        "urlBase",
        "contentPath",
        "logging",
        "authentication",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebOptions:
        """Create an instance of WebOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of https
        if self.https:
            _dict["https"] = self.https.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict["authentication"] = self.authentication.to_dict()
        # set to None if url_base (nullable) is None
        # and __fields_set__ contains the field
        if self.url_base is None and "url_base" in self.__fields_set__:
            _dict["urlBase"] = None

        # set to None if content_path (nullable) is None
        # and __fields_set__ contains the field
        if self.content_path is None and "content_path" in self.__fields_set__:
            _dict["contentPath"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebOptions:
        """Create an instance of WebOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebOptions.parse_obj(obj)

        _obj = WebOptions.parse_obj(
            {
                "port": obj.get("port"),
                "https": HttpsOptions.from_dict(obj.get("https"))
                if obj.get("https") is not None
                else None,
                "url_base": obj.get("urlBase"),
                "content_path": obj.get("contentPath"),
                "logging": obj.get("logging"),
                "authentication": WebAuthenticationOptions.from_dict(
                    obj.get("authentication")
                )
                if obj.get("authentication") is not None
                else None,
            }
        )
        return _obj
