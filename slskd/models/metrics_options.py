# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr

from slskd.models.metrics_authentication_options import MetricsAuthenticationOptions


class MetricsOptions(BaseModel):
    """
    Metrics options.
    """

    enabled: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether the metrics endpoint should be enabled.",
    )
    url: Optional[StrictStr] = Field(
        None, description="Gets the url for the metrics endpoint."
    )
    authentication: Optional[MetricsAuthenticationOptions] = None
    __properties = ["enabled", "url", "authentication"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetricsOptions:
        """Create an instance of MetricsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict["authentication"] = self.authentication.to_dict()
        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict["url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetricsOptions:
        """Create an instance of MetricsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetricsOptions.parse_obj(obj)

        _obj = MetricsOptions.parse_obj(
            {
                "enabled": obj.get("enabled"),
                "url": obj.get("url"),
                "authentication": MetricsAuthenticationOptions.from_dict(
                    obj.get("authentication")
                )
                if obj.get("authentication") is not None
                else None,
            }
        )
        return _obj
