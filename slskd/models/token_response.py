# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class TokenResponse(BaseModel):
    """
    TokenResponse
    """

    expires: Optional[StrictInt] = Field(
        None, description="Gets the time at which the Access Token expires."
    )
    issued: Optional[StrictInt] = Field(
        None, description="Gets the time at which the Access Token was issued."
    )
    name: Optional[StrictStr] = Field(
        None, description="Gets the value of the Name claim from the Access Token."
    )
    not_before: Optional[StrictInt] = Field(
        None,
        alias="notBefore",
        description="Gets the value of the Not Before claim from the Access Token.",
    )
    token: Optional[StrictStr] = Field(
        None, description="Gets the Access Token string."
    )
    token_type: Optional[StrictStr] = Field(
        None, alias="tokenType", description="Gets the Token type."
    )
    __properties = ["expires", "issued", "name", "notBefore", "token", "tokenType"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenResponse:
        """Create an instance of TokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "expires",
                "issued",
                "name",
                "not_before",
                "token",
                "token_type",
            },
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if token (nullable) is None
        # and __fields_set__ contains the field
        if self.token is None and "token" in self.__fields_set__:
            _dict["token"] = None

        # set to None if token_type (nullable) is None
        # and __fields_set__ contains the field
        if self.token_type is None and "token_type" in self.__fields_set__:
            _dict["tokenType"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenResponse:
        """Create an instance of TokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenResponse.parse_obj(obj)

        _obj = TokenResponse.parse_obj(
            {
                "expires": obj.get("expires"),
                "issued": obj.get("issued"),
                "name": obj.get("name"),
                "not_before": obj.get("notBefore"),
                "token": obj.get("token"),
                "token_type": obj.get("tokenType"),
            }
        )
        return _obj
