# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist


class RoomInfo(BaseModel):
    """
    RoomInfo
    """

    name: Optional[StrictStr] = None
    user_count: Optional[StrictInt] = Field(None, alias="userCount")
    users: Optional[conlist(StrictStr)] = None
    __properties = ["name", "userCount", "users"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoomInfo:
        """Create an instance of RoomInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "users",
            },
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if users (nullable) is None
        # and __fields_set__ contains the field
        if self.users is None and "users" in self.__fields_set__:
            _dict["users"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoomInfo:
        """Create an instance of RoomInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoomInfo.parse_obj(obj)

        _obj = RoomInfo.parse_obj(
            {
                "name": obj.get("name"),
                "user_count": obj.get("userCount"),
                "users": obj.get("users"),
            }
        )
        return _obj
