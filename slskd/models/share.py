# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class Share(BaseModel):
    """
    A file share.
    """

    id: Optional[StrictStr] = None
    alias: Optional[StrictStr] = None
    is_excluded: Optional[StrictBool] = Field(None, alias="isExcluded")
    local_path: Optional[StrictStr] = Field(None, alias="localPath")
    raw: Optional[StrictStr] = None
    remote_path: Optional[StrictStr] = Field(None, alias="remotePath")
    directories: Optional[StrictInt] = None
    files: Optional[StrictInt] = None
    __properties = [
        "id",
        "alias",
        "isExcluded",
        "localPath",
        "raw",
        "remotePath",
        "directories",
        "files",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Share:
        """Create an instance of Share from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if alias (nullable) is None
        # and __fields_set__ contains the field
        if self.alias is None and "alias" in self.__fields_set__:
            _dict["alias"] = None

        # set to None if local_path (nullable) is None
        # and __fields_set__ contains the field
        if self.local_path is None and "local_path" in self.__fields_set__:
            _dict["localPath"] = None

        # set to None if raw (nullable) is None
        # and __fields_set__ contains the field
        if self.raw is None and "raw" in self.__fields_set__:
            _dict["raw"] = None

        # set to None if remote_path (nullable) is None
        # and __fields_set__ contains the field
        if self.remote_path is None and "remote_path" in self.__fields_set__:
            _dict["remotePath"] = None

        # set to None if directories (nullable) is None
        # and __fields_set__ contains the field
        if self.directories is None and "directories" in self.__fields_set__:
            _dict["directories"] = None

        # set to None if files (nullable) is None
        # and __fields_set__ contains the field
        if self.files is None and "files" in self.__fields_set__:
            _dict["files"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Share:
        """Create an instance of Share from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Share.parse_obj(obj)

        _obj = Share.parse_obj(
            {
                "id": obj.get("id"),
                "alias": obj.get("alias"),
                "is_excluded": obj.get("isExcluded"),
                "local_path": obj.get("localPath"),
                "raw": obj.get("raw"),
                "remote_path": obj.get("remotePath"),
                "directories": obj.get("directories"),
                "files": obj.get("files"),
            }
        )
        return _obj
