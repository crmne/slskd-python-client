# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

from slskd.models.message_direction import MessageDirection


class PrivateMessage(BaseModel):
    """
    A private message.
    """

    timestamp: Optional[datetime] = Field(
        None, description="The UTC timestamp of the message."
    )
    id: Optional[StrictInt] = Field(
        None, description="The unique message id, used to acknowledge receipt."
    )
    username: Optional[StrictStr] = Field(
        None, description="The username of the remote user."
    )
    direction: Optional[MessageDirection] = None
    message: Optional[StrictStr] = Field(None, description="The message.")
    is_acknowledged: Optional[StrictBool] = Field(
        None,
        alias="isAcknowledged",
        description="A value indicating whether the message has been acknowledged.",
    )
    __properties = [
        "timestamp",
        "id",
        "username",
        "direction",
        "message",
        "isAcknowledged",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrivateMessage:
        """Create an instance of PrivateMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict["message"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrivateMessage:
        """Create an instance of PrivateMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrivateMessage.parse_obj(obj)

        _obj = PrivateMessage.parse_obj(
            {
                "timestamp": obj.get("timestamp"),
                "id": obj.get("id"),
                "username": obj.get("username"),
                "direction": obj.get("direction"),
                "message": obj.get("message"),
                "is_acknowledged": obj.get("isAcknowledged"),
            }
        )
        return _obj
