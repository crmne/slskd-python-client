# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

from slskd.models.file import File


class Directory(BaseModel):
    """
    Directory
    """

    name: Optional[StrictStr] = None
    file_count: Optional[StrictInt] = Field(None, alias="fileCount")
    files: Optional[conlist(File)] = None
    __properties = ["name", "fileCount", "files"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Directory:
        """Create an instance of Directory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "file_count",
                "files",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict["files"] = _items
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if files (nullable) is None
        # and __fields_set__ contains the field
        if self.files is None and "files" in self.__fields_set__:
            _dict["files"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Directory:
        """Create an instance of Directory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Directory.parse_obj(obj)

        _obj = Directory.parse_obj(
            {
                "name": obj.get("name"),
                "file_count": obj.get("fileCount"),
                "files": [File.from_dict(_item) for _item in obj.get("files")]
                if obj.get("files") is not None
                else None,
            }
        )
        return _obj
