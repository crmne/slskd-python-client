# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Dict, Optional

from pydantic import BaseModel, Field, StrictBool, constr

from slskd.models.api_key_options import ApiKeyOptions
from slskd.models.jwt_options import JwtOptions


class WebAuthenticationOptions(BaseModel):
    """
    Authentication options.
    """

    disabled: Optional[StrictBool] = Field(
        None,
        description="Gets a value indicating whether authentication should be disabled.",
    )
    username: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(
        None, description="Gets the username for the web UI."
    )
    password: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(
        None, description="Gets the password for the web UI."
    )
    jwt: Optional[JwtOptions] = None
    api_keys: Optional[Dict[str, ApiKeyOptions]] = Field(
        None, alias="apiKeys", description="Gets API keys."
    )
    __properties = ["disabled", "username", "password", "jwt", "apiKeys"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebAuthenticationOptions:
        """Create an instance of WebAuthenticationOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of jwt
        if self.jwt:
            _dict["jwt"] = self.jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in api_keys (dict)
        _field_dict = {}
        if self.api_keys:
            for _key in self.api_keys:
                if self.api_keys[_key]:
                    _field_dict[_key] = self.api_keys[_key].to_dict()
            _dict["apiKeys"] = _field_dict
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict["password"] = None

        # set to None if api_keys (nullable) is None
        # and __fields_set__ contains the field
        if self.api_keys is None and "api_keys" in self.__fields_set__:
            _dict["apiKeys"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebAuthenticationOptions:
        """Create an instance of WebAuthenticationOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebAuthenticationOptions.parse_obj(obj)

        _obj = WebAuthenticationOptions.parse_obj(
            {
                "disabled": obj.get("disabled"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "jwt": JwtOptions.from_dict(obj.get("jwt"))
                if obj.get("jwt") is not None
                else None,
                "api_keys": dict(
                    (_k, ApiKeyOptions.from_dict(_v))
                    for _k, _v in obj.get("apiKeys").items()
                )
                if obj.get("apiKeys") is not None
                else None,
            }
        )
        return _obj
