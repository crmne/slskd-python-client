# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel

from slskd.models.buffer_options import BufferOptions
from slskd.models.proxy_options import ProxyOptions
from slskd.models.timeout_options import TimeoutOptions


class ConnectionOptions(BaseModel):
    """
    Connection options.
    """

    timeout: Optional[TimeoutOptions] = None
    buffer: Optional[BufferOptions] = None
    proxy: Optional[ProxyOptions] = None
    __properties = ["timeout", "buffer", "proxy"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConnectionOptions:
        """Create an instance of ConnectionOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of timeout
        if self.timeout:
            _dict["timeout"] = self.timeout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buffer
        if self.buffer:
            _dict["buffer"] = self.buffer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict["proxy"] = self.proxy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConnectionOptions:
        """Create an instance of ConnectionOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConnectionOptions.parse_obj(obj)

        _obj = ConnectionOptions.parse_obj(
            {
                "timeout": TimeoutOptions.from_dict(obj.get("timeout"))
                if obj.get("timeout") is not None
                else None,
                "buffer": BufferOptions.from_dict(obj.get("buffer"))
                if obj.get("buffer") is not None
                else None,
                "proxy": ProxyOptions.from_dict(obj.get("proxy"))
                if obj.get("proxy") is not None
                else None,
            }
        )
        return _obj
