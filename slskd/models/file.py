# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from slskd.models.file_attribute import FileAttribute


class File(BaseModel):
    """
    File
    """

    attribute_count: Optional[StrictInt] = Field(None, alias="attributeCount")
    attributes: Optional[conlist(FileAttribute)] = None
    bit_depth: Optional[StrictInt] = Field(None, alias="bitDepth")
    bit_rate: Optional[StrictInt] = Field(None, alias="bitRate")
    code: Optional[StrictInt] = None
    extension: Optional[StrictStr] = None
    filename: Optional[StrictStr] = None
    is_variable_bit_rate: Optional[StrictBool] = Field(None, alias="isVariableBitRate")
    length: Optional[StrictInt] = None
    sample_rate: Optional[StrictInt] = Field(None, alias="sampleRate")
    size: Optional[StrictInt] = None
    __properties = [
        "attributeCount",
        "attributes",
        "bitDepth",
        "bitRate",
        "code",
        "extension",
        "filename",
        "isVariableBitRate",
        "length",
        "sampleRate",
        "size",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> File:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "attribute_count",
                "attributes",
                "bit_depth",
                "bit_rate",
                "is_variable_bit_rate",
                "length",
                "sample_rate",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["attributes"] = _items
        # set to None if attributes (nullable) is None
        # and __fields_set__ contains the field
        if self.attributes is None and "attributes" in self.__fields_set__:
            _dict["attributes"] = None

        # set to None if bit_depth (nullable) is None
        # and __fields_set__ contains the field
        if self.bit_depth is None and "bit_depth" in self.__fields_set__:
            _dict["bitDepth"] = None

        # set to None if bit_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.bit_rate is None and "bit_rate" in self.__fields_set__:
            _dict["bitRate"] = None

        # set to None if extension (nullable) is None
        # and __fields_set__ contains the field
        if self.extension is None and "extension" in self.__fields_set__:
            _dict["extension"] = None

        # set to None if filename (nullable) is None
        # and __fields_set__ contains the field
        if self.filename is None and "filename" in self.__fields_set__:
            _dict["filename"] = None

        # set to None if is_variable_bit_rate (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.is_variable_bit_rate is None
            and "is_variable_bit_rate" in self.__fields_set__
        ):
            _dict["isVariableBitRate"] = None

        # set to None if length (nullable) is None
        # and __fields_set__ contains the field
        if self.length is None and "length" in self.__fields_set__:
            _dict["length"] = None

        # set to None if sample_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.sample_rate is None and "sample_rate" in self.__fields_set__:
            _dict["sampleRate"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> File:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return File.parse_obj(obj)

        _obj = File.parse_obj(
            {
                "attribute_count": obj.get("attributeCount"),
                "attributes": [
                    FileAttribute.from_dict(_item) for _item in obj.get("attributes")
                ]
                if obj.get("attributes") is not None
                else None,
                "bit_depth": obj.get("bitDepth"),
                "bit_rate": obj.get("bitRate"),
                "code": obj.get("code"),
                "extension": obj.get("extension"),
                "filename": obj.get("filename"),
                "is_variable_bit_rate": obj.get("isVariableBitRate"),
                "length": obj.get("length"),
                "sample_rate": obj.get("sampleRate"),
                "size": obj.get("size"),
            }
        )
        return _obj
