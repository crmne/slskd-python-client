# coding: utf-8

"""
    slskd

    A python client for slskd  # noqa: E501

    The version of the OpenAPI document: 0.17.8.0
    Contact: carmine@paolino.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from slskd.models.private_message import PrivateMessage


class Conversation(BaseModel):
    """
    Conversation
    """

    username: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    un_acknowledged_message_count: Optional[StrictInt] = Field(
        None, alias="unAcknowledgedMessageCount"
    )
    has_un_acknowledged_messages: Optional[StrictBool] = Field(
        None, alias="hasUnAcknowledgedMessages"
    )
    messages: Optional[conlist(PrivateMessage)] = None
    __properties = [
        "username",
        "isActive",
        "unAcknowledgedMessageCount",
        "hasUnAcknowledgedMessages",
        "messages",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Conversation:
        """Create an instance of Conversation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "has_un_acknowledged_messages",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict["messages"] = _items
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if messages (nullable) is None
        # and __fields_set__ contains the field
        if self.messages is None and "messages" in self.__fields_set__:
            _dict["messages"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Conversation:
        """Create an instance of Conversation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Conversation.parse_obj(obj)

        _obj = Conversation.parse_obj(
            {
                "username": obj.get("username"),
                "is_active": obj.get("isActive"),
                "un_acknowledged_message_count": obj.get("unAcknowledgedMessageCount"),
                "has_un_acknowledged_messages": obj.get("hasUnAcknowledgedMessages"),
                "messages": [
                    PrivateMessage.from_dict(_item) for _item in obj.get("messages")
                ]
                if obj.get("messages") is not None
                else None,
            }
        )
        return _obj
