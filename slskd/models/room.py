# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from slskd.models.room_message import RoomMessage
from slskd.models.user_data import UserData


class Room(BaseModel):
    """
    Room
    """

    name: Optional[StrictStr] = Field(None, description="The room name.")
    is_private: Optional[StrictBool] = Field(
        None,
        alias="isPrivate",
        description="A value indicating whether the room is private.",
    )
    operator_count: Optional[StrictInt] = Field(
        None,
        alias="operatorCount",
        description="The number of operators in the room, if private.",
    )
    operators: Optional[conlist(StrictStr)] = Field(
        None, description="The operators in the room, if private."
    )
    owner: Optional[StrictStr] = Field(
        None, description="The owner of the room, if private."
    )
    users: Optional[conlist(UserData)] = Field(
        None, description="The list of users in the room."
    )
    messages: Optional[conlist(RoomMessage)] = Field(
        None, description="The list of messages."
    )
    __properties = [
        "name",
        "isPrivate",
        "operatorCount",
        "operators",
        "owner",
        "users",
        "messages",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Room:
        """Create an instance of Room from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict["users"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict["messages"] = _items
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if operator_count (nullable) is None
        # and __fields_set__ contains the field
        if self.operator_count is None and "operator_count" in self.__fields_set__:
            _dict["operatorCount"] = None

        # set to None if operators (nullable) is None
        # and __fields_set__ contains the field
        if self.operators is None and "operators" in self.__fields_set__:
            _dict["operators"] = None

        # set to None if owner (nullable) is None
        # and __fields_set__ contains the field
        if self.owner is None and "owner" in self.__fields_set__:
            _dict["owner"] = None

        # set to None if users (nullable) is None
        # and __fields_set__ contains the field
        if self.users is None and "users" in self.__fields_set__:
            _dict["users"] = None

        # set to None if messages (nullable) is None
        # and __fields_set__ contains the field
        if self.messages is None and "messages" in self.__fields_set__:
            _dict["messages"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Room:
        """Create an instance of Room from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Room.parse_obj(obj)

        _obj = Room.parse_obj(
            {
                "name": obj.get("name"),
                "is_private": obj.get("isPrivate"),
                "operator_count": obj.get("operatorCount"),
                "operators": obj.get("operators"),
                "owner": obj.get("owner"),
                "users": [UserData.from_dict(_item) for _item in obj.get("users")]
                if obj.get("users") is not None
                else None,
                "messages": [
                    RoomMessage.from_dict(_item) for _item in obj.get("messages")
                ]
                if obj.get("messages") is not None
                else None,
            }
        )
        return _obj
