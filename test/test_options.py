# coding: utf-8

"""
    slskd

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest

from slskd.models.options import Options  # noqa: E501


class TestOptions(unittest.TestCase):
    """Options unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Options
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Options`
        """
        model = slskd.models.options.Options()  # noqa: E501
        if include_optional :
            return Options(
                debug = True,
                remote_configuration = True,
                instance_name = '',
                flags = slskd.models.flags_options.FlagsOptions(
                    no_logo = True,
                    no_start = True,
                    no_connect = True,
                    no_share_scan = True,
                    force_share_scan = True,
                    no_version_check = True,
                    log_sql = True,
                    experimental = True,
                    volatile = True,
                    case_sensitive_reg_ex = True, ),
                relay = slskd.models.relay_options.RelayOptions(
                    enabled = True,
                    mode = '',
                    controller = slskd.models.relay_controller_configuration_options.RelayControllerConfigurationOptions(
                        address = '',
                        ignore_certificate_errors = True,
                        api_key = '0123456789101112131415',
                        secret = '0123456789101112131415',
                        downloads = True, ),
                    agents = {
                        'key' : slskd.models.relay_agent_configuration_options.RelayAgentConfigurationOptions(
                            instance_name = '0',
                            secret = '0123456789101112131415',
                            cidr = '', )
                        }, ),
                directories = slskd.models.directories_options.DirectoriesOptions(
                    incomplete = '',
                    downloads = '', ),
                shares = slskd.models.shares_options.SharesOptions(
                    directories = [
                        ''
                        ],
                    filters = [
                        ''
                        ],
                    cache = slskd.models.share_cache_options.ShareCacheOptions(
                        storage_mode = '',
                        workers = 1, ), ),
                var_global = slskd.models.global_options.GlobalOptions(
                    upload = slskd.models.global_upload_options.GlobalUploadOptions(
                        slots = 1,
                        speed_limit = 1, ),
                    download = slskd.models.global_download_options.GlobalDownloadOptions(
                        slots = 1,
                        speed_limit = 1, ), ),
                groups = slskd.models.groups_options.GroupsOptions(
                    default = slskd.models.built_in_options.BuiltInOptions(
                        upload = slskd.models.upload_options.UploadOptions(
                            priority = 1,
                            strategy = '',
                            slots = 1,
                            speed_limit = 1, ), ),
                    leechers = slskd.models.leecher_options.LeecherOptions(
                        thresholds = slskd.models.threshold_options.ThresholdOptions(
                            files = 1,
                            directories = 1, ), ),
                    blacklisted = slskd.models.blacklisted_options.BlacklistedOptions(
                        members = [
                            ''
                            ], ),
                    user_defined = {
                        'key' : slskd.models.user_defined_options.UserDefinedOptions()
                        }, ),
                filters = slskd.models.filters_options.FiltersOptions(
                    search = slskd.models.search_options.SearchOptions(
                        request = [
                            ''
                            ], ), ),
                rooms = [
                    ''
                    ],
                web = slskd.models.web_options.WebOptions(
                    port = 1,
                    https = slskd.models.https_options.HttpsOptions(
                        disabled = True,
                        port = 1,
                        force = True,
                        certificate = slskd.models.certificate_options.CertificateOptions(
                            pfx = '',
                            password = '', ), ),
                    url_base = '',
                    content_path = '0',
                    logging = True,
                    authentication = slskd.models.web_authentication_options.WebAuthenticationOptions(
                        disabled = True,
                        username = '0',
                        password = '0',
                        jwt = slskd.models.jwt_options.JwtOptions(
                            key = '0123456789101112131415',
                            ttl = 3600, ),
                        api_keys = {
                            'key' : slskd.models.api_key_options.ApiKeyOptions(
                                key = '0123456789101112131415',
                                role = '',
                                cidr = '', )
                            }, ), ),
                logger = slskd.models.logger_options.LoggerOptions(
                    loki = '', ),
                metrics = slskd.models.metrics_options.MetricsOptions(
                    enabled = True,
                    url = '',
                    authentication = slskd.models.metrics_authentication_options.MetricsAuthenticationOptions(
                        disabled = True,
                        username = '0',
                        password = '0', ), ),
                feature = slskd.models.feature_options.FeatureOptions(
                    swagger = True, ),
                soulseek = slskd.models.soulseek_options.SoulseekOptions(
                    username = '',
                    password = '',
                    description = '',
                    listen_port = 1024,
                    diagnostic_level = 'None',
                    distributed_network = slskd.models.distributed_network_options.DistributedNetworkOptions(
                        disabled = True,
                        disable_children = True,
                        child_limit = 1,
                        logging = True, ),
                    connection = slskd.models.connection_options.ConnectionOptions(
                        timeout = slskd.models.timeout_options.TimeoutOptions(
                            connect = 1000,
                            inactivity = 1000, ),
                        buffer = slskd.models.buffer_options.BufferOptions(
                            read = 1024,
                            write = 1024,
                            transfer = 81920,
                            write_queue = 5, ),
                        proxy = slskd.models.proxy_options.ProxyOptions(
                            enabled = True,
                            address = '0',
                            port = 1,
                            username = '0',
                            password = '0', ), ), ),
                integration = slskd.models.integration_options.IntegrationOptions(
                    ftp = slskd.models.ftp_options.FtpOptions(
                        enabled = True,
                        address = '',
                        port = 1,
                        encryption_mode = '',
                        ignore_certificate_errors = True,
                        username = '',
                        password = '',
                        remote_path = '',
                        overwrite_existing = True,
                        connection_timeout = 0,
                        retry_attempts = 0, ),
                    pushbullet = slskd.models.pushbullet_options.PushbulletOptions(
                        enabled = True,
                        access_token = '',
                        notification_prefix = '',
                        notify_on_private_message = True,
                        notify_on_room_mention = True,
                        retry_attempts = 0,
                        cooldown_time = 56, ), )
            )
        else :
            return Options(
        )
        """

    def testOptions(self):
        """Test Options"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
